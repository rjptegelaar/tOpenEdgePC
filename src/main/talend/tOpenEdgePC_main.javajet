//Copyright 2015 Paul Tegelaar
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//tOpenEdgePC is not supported, endorsed by or affiliated with Progress Software in any way. Do not contact Progress Software with questions or remarks. Instead open an issue in the issue tracker.
//
//"OpenEdge" is a trademark of Progress Software.
<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map
    	java.util.Date    	   
    	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
    List<Map<String, String>> procedureArguments = (List<Map<String,String>>) ElementParameterParser.getObjectValue(node, "__procedureArguments__");
    String procedureName = ElementParameterParser.getValue(node, "__procedureName__");    
%>
        
nl.progaia.progress.talend.utils.TalendProcedureMapping proc_<%=cid %> = new nl.progaia.progress.talend.utils.TalendProcedureMapping(<%=procedureName%>);

<%

// Search incoming schema
IMetadataTable inMetadata = null;
IMetadataTable outMetadata = null;
IConnection inConnection = null;
String inConnectionName = null;

List<? extends IConnection> inConnections = node.getIncomingConnections();
if (inConnections != null) {
	for (int i = 0; i < inConnections.size(); i++) {
		IConnection connection = inConnections.get(i);
    	if (connection.getLineStyle().hasConnectionCategory(
    			IConnectionCategory.DATA)) {
		    inConnection = connection;
		    inConnectionName = inConnection.getName();
		    inMetadata = inConnection.getMetadataTable();
    	}
	}
}

IMetadataTable metadata = null;

List<IMetadataTable> metadatas = node.getMetadataList();
if (metadatas != null && metadatas.size() > 0) {
    metadata = metadatas.get(0);
}

	// We only generate output if outgoing schema is defined
	if ((metadatas != null) && (metadatas.size() > 0)) {
		List<IMetadataColumn> columnList = metadata.getListColumns();
		
		// Iterate over procedure arguments
		for (int i = 0; i < procedureArguments.size(); i++) {
			Map<String, String> procedureArgument = procedureArguments.get(i);
			String argName = procedureArgument.get("COLUMN");
			String argType = procedureArgument.get("TYPE");
			String argDBType = procedureArgument.get("DBTYPE");
%>			
			proc_<%=cid %>.addParameter(nl.progaia.progress.client.ParameterModeType.valueOf("<%=argType %>"), nl.progaia.progress.client.ParameterType.valueOf("<%=argDBType %>"), "<%=argName %>");			
<%			
		}
		
%>
			//Create new TalendRow to fill with columns
			nl.progaia.progress.talend.utils.TalendRow tr_<%=cid %> = new nl.progaia.progress.talend.utils.TalendRow();
<%
		
		
		if ((node.getIncomingConnections()!=null)&&(node.getIncomingConnections().size()>0)){
			String inRowName = node.getIncomingConnections().get(0).getName();
			if (inMetadata != null) {
				List<IMetadataColumn> columns = inMetadata.getListColumns();
				for (int i = 0; i < columns.size(); i++){
					IMetadataColumn column = columns.get(i);
					
					//Store type for later use 
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
										
					String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(),true);
					String pattern = column.getPattern();

					if(pattern==null || "".equals(pattern)){
	     				pattern="\"\"";
	     			 }
	     			Integer precisionValue = column.getPrecision();	     				 
	     			Integer lengthValue = column.getLength();
	     			String precision = "";
	     			String length = "";

					if(precisionValue!=null){
						precision=String.valueOf(precisionValue);
					}else{
						precision="\"\"";
					}
					
					if(lengthValue!=null){
						length=String.valueOf(lengthValue);
					}else{
						length="\"\"";
					}
					
					String label = column.getLabel();
					
					if(javaType == JavaTypesManager.DATE){
					%>
						Date tempDate_<%=cid%>_<%=inRowName%>_<%=column.getLabel()%> = <%=inRowName%>.<%=column.getLabel()%>;
						if(tempDate_<%=cid%>_<%=inRowName%>_<%=column.getLabel()%>!=null){
							tr_<%=cid %>.addColumn(new nl.progaia.progress.talend.utils.TalendColumn("<%=label %>",tempDate_<%=cid%>_<%=inRowName%>_<%=column.getLabel()%>.getTime(),"<%=typeToGenerate %>",<%=pattern %>,String.valueOf(<%=precision %>),String.valueOf(<%=length %>)), "<%=label %>");														
						}else{
							tr_<%=cid %>.addColumn(new nl.progaia.progress.talend.utils.TalendColumn("<%=label %>",null,"<%=typeToGenerate %>",<%=pattern %>,String.valueOf(<%=precision %>),String.valueOf(<%=length %>)), "<%=label %>");
						}					
					<%
					}else{
					%>
						tr_<%=cid %>.addColumn(new nl.progaia.progress.talend.utils.TalendColumn("<%=label %>",<%=inRowName%>.<%=column.getLabel()%>,"<%=typeToGenerate %>",<%=pattern %>,String.valueOf(<%=precision %>),String.valueOf(<%=length %>)), "<%=label %>");					
					<%
					}
					
					
				}
			}
		}
%>
		java.util.Map<Integer, nl.progaia.progress.valueholder.ValueHolder<?>> procedureResult_<%=cid %> = ac_<%=cid %>.callProcedure(proc_<%=cid %>.getValues(tr_<%=cid %>),proc_<%=cid %>.getProcedure());
		proc_<%=cid %>.appendProcedureResult(procedureResult_<%=cid %>,tr_<%=cid %>);
				
<%		
		List<? extends IConnection> outConnections = node.getOutgoingConnections();
		IConnection firstOutConnection = null;
		
		if (outConnections != null) {
			// Search first outgoing connection, if exists
			int connectionIndex = -1;
			for (int i = 0; i < outConnections.size(); i++) {
				IConnection connection = outConnections.get(i);
    			if (connection.getLineStyle().hasConnectionCategory(
    					IConnectionCategory.DATA)) {
					firstOutConnection = connection;
					connectionIndex = i;
					break;
				}
			}
			
			if (firstOutConnection != null) {
				outMetadata = firstOutConnection.getMetadataTable();
				List<IMetadataColumn> outColumnList = outMetadata.getListColumns();
				
				for (IMetadataColumn outColumn : outColumnList) {
					String label = outColumn.getLabel();
					
					JavaType javaType = JavaTypesManager.getJavaTypeFromId(outColumn.getTalendType());
%>					
					nl.progaia.progress.talend.utils.TalendColumn column_<%=cid %>_<%=label %> = tr_<%=cid %>.getColumnByName("<%=label %>");														
<%
					if(javaType == JavaTypesManager.DATE){				
%>
						if(column_<%=cid %>_<%=label %>!=null){
							if(column_<%=cid %>_<%=label %>.getValue()!=null){	
								Date dateValue = null;
								if(column_<%=cid %>_<%=label %>.getValue() instanceof Long){
									dateValue = new Date((Long)column_<%=cid %>_<%=label %>.getValue());
								}else if(column_<%=cid %>_<%=label %>.getValue() instanceof Date){
									dateValue = (Date)column_<%=cid %>_<%=label %>.getValue();
								}else if(column_<%=cid %>_<%=label %>.getValue() instanceof java.util.GregorianCalendar ){
									dateValue =((java.util.GregorianCalendar)column_<%=cid %>_<%=label %>.getValue()).getTime();
								}																																										
								<%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = dateValue;																							
							}						
						}	
<%
					}else if(javaType == JavaTypesManager.STRING){
%>
						if(column_<%=cid %>_<%=label %>!=null){
							  <%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = (String)column_<%=cid %>_<%=label %>.getValue();					
						}					
<%
					}else if(javaType == JavaTypesManager.LONG){
%>
						if(column_<%=cid %>_<%=label %>!=null){
							  <%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = (Long)column_<%=cid %>_<%=label %>.getValue();					
						}					
<%
					}else if(javaType == JavaTypesManager.BYTE_ARRAY){
%>
						if(column_<%=cid %>_<%=label %>!=null){
							if(column_<%=cid %>_<%=label %>.getValue()!=null){	
								byte[] byteArray = null;
								if(column_<%=cid %>_<%=label %>.getValue() instanceof byte[]){
									byteArray = (byte[])column_<%=cid %>_<%=label %>.getValue();
								}else if(column_<%=cid %>_<%=label %>.getValue() instanceof com.progress.open4gl.Memptr){
									byteArray = ((com.progress.open4gl.Memptr)column_<%=cid %>_<%=label %>.getValue()).getBytes();
								}																																										
								<%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = byteArray;																							
							}						
						}						
<%
					}else if(javaType == JavaTypesManager.BYTE){
%>
						if(column_<%=cid %>_<%=label %>!=null){ 
								Byte byteValue = null;
								if(column_<%=cid %>_<%=label %>.getValue() instanceof Byte){
									byteValue = (Byte)column_<%=cid %>_<%=label %>.getValue();
								}else if(column_<%=cid %>_<%=label %>.getValue() instanceof Integer){
									Integer tempInt = (Integer)column_<%=cid %>_<%=label %>.getValue(); 
									if(tempInt<=Byte.MAX_VALUE){
										byteValue = tempInt.byteValue();
									}else{
										java.util.logging.Logger.getAnonymousLogger().warning("Integer too large to convert to byte.");	
									}
									 
								}
																																										
								<%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = byteValue;										
						}						
<%
					}else if(javaType == JavaTypesManager.CHARACTER){
%>
						if(column_<%=cid %>_<%=label %>!=null){
							if(column_<%=cid %>_<%=label %>.getValue()!=null){	
								Character characterValue = null;
								if(column_<%=cid %>_<%=label %>.getValue() instanceof String){
									String string = (String)column_<%=cid %>_<%=label %>.getValue();
									characterValue = string.charAt(0);
								}else if(column_<%=cid %>_<%=label %>.getValue() instanceof Character){
									characterValue = (Character)column_<%=cid %>_<%=label %>.getValue();
								}																																										
								<%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = characterValue;																							
							}						
						}					
<%															
					}else if(javaType == JavaTypesManager.INTEGER){
%>
						if(column_<%=cid %>_<%=label %>!=null){
							  <%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = (Integer)column_<%=cid %>_<%=label %>.getValue();					
						}					
<%										
					}else if(javaType == JavaTypesManager.SHORT){
%>
						if(column_<%=cid %>_<%=label %>!=null){
							  	Short shortValue = null;
								if(column_<%=cid %>_<%=label %>.getValue() instanceof Short){
									shortValue = (Short)column_<%=cid %>_<%=label %>.getValue();
								}else if(column_<%=cid %>_<%=label %>.getValue() instanceof Integer){
									Integer tempInt = (Integer)column_<%=cid %>_<%=label %>.getValue(); 
									if(tempInt<=Short.MAX_VALUE){
										shortValue = tempInt.shortValue();
									}else{
										java.util.logging.Logger.getAnonymousLogger().warning("Integer too large to convert to short.");	
									}
									 
								}
																																										
								<%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = shortValue;					
						}					
<%										
					}else if(javaType == JavaTypesManager.DOUBLE){
%>
						if(column_<%=cid %>_<%=label %>!=null){
							if(column_<%=cid %>_<%=label %>.getValue()!=null){	
								Double doubleValue = null;
								if(column_<%=cid %>_<%=label %>.getValue() instanceof BigDecimal){
									BigDecimal bd = (BigDecimal)column_<%=cid %>_<%=label %>.getValue();
									doubleValue = bd.doubleValue();
								}else if(column_<%=cid %>_<%=label %>.getValue() instanceof Double){
									doubleValue = (Double)column_<%=cid %>_<%=label %>.getValue();
								}
																																										
								<%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = doubleValue;
																								
							}							  				
						}					
<%														
					}else if(javaType == JavaTypesManager.FLOAT){
%>
						if(column_<%=cid %>_<%=label %>!=null){
							if(column_<%=cid %>_<%=label %>.getValue()!=null){	
								Float floatValue = null;
								if(column_<%=cid %>_<%=label %>.getValue() instanceof BigDecimal){
									BigDecimal bd = (BigDecimal)column_<%=cid %>_<%=label %>.getValue();
									floatValue = bd.floatValue();
								}else if(column_<%=cid %>_<%=label %>.getValue() instanceof Float){
									floatValue = (Float)column_<%=cid %>_<%=label %>.getValue();
								}
																																										
								<%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = floatValue;
																								
							}							  				
						}			
<%					
					}else if(javaType == JavaTypesManager.BOOLEAN){
%>
						if(column_<%=cid %>_<%=label %>!=null){
							  <%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = (Boolean)column_<%=cid %>_<%=label %>.getValue();					
						}					
<%															
					}else{
						if(javaType.getNullableClass().equals(java.math.BigDecimal.class)){
%>						
							<%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = (BigDecimal)column_<%=cid %>_<%=label %>.getValue();
<%
						}else{
%>
							//If all else fails, try to get String value.
							java.util.logging.Logger.getAnonymousLogger().warning("Unable to map <%=javaType %>, trying to get String value");
							<%=firstOutConnection.getName() %>.<%=outColumn.getLabel() %> = String.valueOf(column_<%=cid %>_<%=label %>.getValue());
<%						
						}
					}		
				}
			}
		}				
%>		
		
<%				
	}
%>



